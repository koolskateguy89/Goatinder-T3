// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    refresh_token_expires_in Int? // Github
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    profile       Profile?
    disliked      Shoe[]         @relation("Dislikes")
    liked         Shoe[]         @relation("Likes")
    comments      ShoeComments[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// TODO
// decide what to show
// decide if necessary
model Profile {
    userId String @id
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// just what is returned from algolia
model GoatShoe {
    searchSKU String @id
    json      String @unique
    shoe      Shoe?
}

// 'actual' additional things about shoe
// tbh might as well just put in GoatShoe? because it seems to be all relations
model Shoe {
    goatShoeSKU String         @id
    goatShoe    GoatShoe       @relation(fields: [goatShoeSKU], references: [searchSKU])
    dislikes    User[]         @relation("Dislikes")
    likes       User[]         @relation("Likes")
    comments    ShoeComments[]
}

// TODO: forum/comment kinda system for shoes
// should we do notifications for comments? or smthn idk

model ShoeComments {
    id          String   @id @default(cuid())
    shoeSKU     String
    userId      String
    datePosted  DateTime @default(now())
    dateUpdated DateTime @updatedAt
    upvotes     Int      @default(0)
    downvotes   Int      @default(0)
    shoe        Shoe     @relation(fields: [shoeSKU], references: [goatShoeSKU])
    user        User     @relation(fields: [userId], references: [id])
}

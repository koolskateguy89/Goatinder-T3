// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    refresh_token_expires_in Int? // Github
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    profile       Profile?

    disliked          Shoe[]        @relation("Dislikes")
    liked             Shoe[]        @relation("Likes")
    comments          ShoeComment[]
    upvotedComments   ShoeComment[] @relation("Upvoters")
    downvotedComments ShoeComment[] @relation("Downvoters")

    createdGroups         GroupChat[]        @relation("GroupChatCreator")
    groups                GroupChat[]        @relation("GroupChatMember")
    sentMessages          PrivateMessage[]   @relation("Sender")
    receivedMessages      PrivateMessage[]   @relation("Receiver")
    sentGroupChatMessages GroupChatMessage[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// TODO: add other fields, like shoe size(?), etc.
model Profile {
    userId String  @id
    bio    String? @db.Text
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Shoe {
    objectId         String        @id
    name             String
    main_picture_url String
    dislikes         User[]        @relation("Dislikes")
    likes            User[]        @relation("Likes")
    comments         ShoeComment[]
}

// should we do notifications for comments? or smthn idk
model ShoeComment {
    id          String   @id @default(cuid())
    shoeId      String
    authorId    String
    content     String   @db.Text
    datePosted  DateTime @default(now())
    dateUpdated DateTime @updatedAt
    shoe        Shoe     @relation(fields: [shoeId], references: [objectId])
    author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    upvoters    User[]   @relation("Upvoters")
    downvoters  User[]   @relation("Downvoters")
}

// TODO: migrate db & seed messages

model GroupChat {
    id        String             @id @default(cuid())
    name      String
    image     String
    creatorId String
    createdAt DateTime           @default(now())
    creator   User               @relation("GroupChatCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    members   User[]             @relation("GroupChatMember")
    messages  GroupChatMessage[]
}

model PrivateMessage {
    id         String   @id @default(cuid())
    senderId   String
    receiverId String
    sentAt     DateTime @default(now())
    content    String   @db.Text
    sender     User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
    receiver   User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model GroupChatMessage {
    id          String    @id @default(cuid())
    senderId    String
    groupChatId String
    sentAt      DateTime  @default(now())
    content     String    @db.Text
    sender      User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
    groupChat   GroupChat @relation(fields: [groupChatId], references: [id], onDelete: Cascade)
}

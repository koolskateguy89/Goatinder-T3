import { useState } from "react";

import type { CommentAreaComment } from "types/comment";
import Comment from "components/Comment";
import NewCommentForm from "./comment/NewCommentForm";

export type CommentAreaProps = {
  shoeId: string;
  comments: CommentAreaComment[];
};

export default function CommentArea({
  shoeId,
  comments: initialComments,
}: CommentAreaProps) {
  const [comments, setComments] =
    useState<CommentAreaComment[]>(initialComments);

  // TODO: functionality to order comments by options, default datePosted
  // score asc/desc, date asc/desc
  // but then would need to handle score state in this component
  // not in Comment component as it is now

  // generated by copilot:
  // might need to use useReducer here, for example if you want to add a comment:
  // setComments([...comments, comment]);
  // but if you want to delete a comment:
  // setComments(comments.filter((comment) => comment.id !== id));
  // so you'd need to use a reducer to handle both cases
  // which would look like:
  //   const [comments, dispatchComments] = useReducer(commentsReducer, initialComments);
  // and then you'd have a commentsReducer function that handles both cases
  //   const commentsReducer = (state, action) => {
  //     switch (action.type) {
  //       case "add":
  //         return [...state, action.payload];
  //       case "delete":
  //         return state.filter((comment) => comment.id !== action.payload);
  //       default:
  //         return state;
  //     }
  //   }
  // with types:
  //   type CommentsAction =
  //     | { type: "add"; payload: CommentAreaComment }
  //     | { type: "delete"; payload: string };
  //   const commentsReducer = (state, action: CommentsAction) => {
  //     ...
  //   }
  // and then you can use that reducer in both cases:
  //   dispatchComments({ type: "add", payload: comment });
  //   dispatchComments({ type: "delete", payload: id });

  const onCommentAdded = (comment: CommentAreaComment) => {
    setComments([...comments, comment]);
  };

  const onCommentDeleted = (id: string) => {
    setComments(comments.filter((comment) => comment.id !== id));
  };

  return (
    <section className="w-full md:w-3/4">
      {/* TODO?: scroll header thingy */}
      <h2 className="text-2xl font-semibold">Comments</h2>

      <div className="card">
        <NewCommentForm shoeId={shoeId} onCommentAdded={onCommentAdded} />
      </div>

      <ul>
        {comments.map((comment) => (
          <li key={comment.id}>
            <Comment
              comment={comment}
              userUpvoted={comment.upvoters.length > 0}
              userDownvoted={comment.downvoters.length > 0}
              onCommentDeleted={onCommentDeleted}
            />
          </li>
        ))}
      </ul>
    </section>
  );
}
